{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","linkValidity","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasLinkValidityError","htmlFor","type","classNames","event","target","onBlur","initialMovieState","NewMovie","onAdd","setMovie","count","setCount","linkImdbValidity","setLinkImdbValidity","linkImgValidity","setLinkImgValidity","requiredCompleted","pattern","RegExp","handleInputChange","key","prevFields","trimStart","test","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"2uEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,8BCSpC,IAAMC,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,aAKI,MALIF,EAKJ,MAJJG,mBAII,sBAJmBD,GAInB,MAHJE,gBAGI,aAFJC,gBAEI,MAFO,WAAS,EAEhB,EADJC,EACI,EADJA,aAEA,EAAaC,oBAAS,2BAASP,EAAT,YAdfQ,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAYa,IAAfC,EAAP,oBACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWT,IAAaH,EAEnCe,GACc,IAAjBV,GAA2BO,GAAWZ,GAASG,EAElD,OACE,sBAAKjB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ8B,QAASL,EAAlC,SACGV,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE+B,KAAK,OACLN,GAAIA,EACJ,0BAAkBZ,GAClBb,UAAWgC,IAAW,QAAS,CAC7B,YAAaJ,GAAYC,IAE3Bb,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAe,GAAK,OAAIf,EAASL,EAAMoB,EAAMC,OAAOpB,MAAhC,EACfqB,OAAQ,kBAAMR,GAAW,EAAjB,MAIXC,GACC,mBAAG5B,UAAU,iBAAb,mBAAkCe,EAAlC,kBAGDc,GACC,mBAAG7B,UAAU,iBAAb,mBAAkCe,EAAlC,4BAIP,ECzDKqB,EAAoB,CACxBhC,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,IAGG0B,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BlB,mBAASgB,GAAnC,mBAAOrC,EAAP,KAAcwC,EAAd,KACA,EAA0BnB,mBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAAgDrB,oBAAS,GAAzD,mBAAOsB,EAAP,KAAyBC,EAAzB,KACA,EAA8CvB,oBAAS,GAAvD,mBAAOwB,EAAP,KAAwBC,EAAxB,KACMC,EACJ/C,EAAMK,OAASL,EAAMG,QAAUH,EAAMQ,SAAWR,EAAMY,QACpD+B,GAAoBE,EAElBG,EAAU,IAAIC,OAClB,gJAuBIC,EAAoB,SAACC,EAAapC,GACtCyB,GAAS,SAACY,GACR,OAAO,2BACFA,GADL,kBAEGD,EAAMpC,EAAMsC,aAEhB,IAEY,WAARF,GACHL,EAAmBE,EAAQM,KAAKvC,IAGrB,YAARoC,GACHP,EAAoBI,EAAQM,KAAKvC,GAEpC,EAED,OACE,uBACEd,UAAU,WAEVsD,SAjCc,SAACrB,GACjBA,EAAMsB,iBAEDT,IAILR,EAAMvC,GAZNwC,EAASH,GACTO,GAAoB,GACpBE,GAAmB,GAYnBJ,EAASD,EAAQ,GAClB,EAoBC,UAKE,oBAAIxC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOf,EAAMK,MACbc,SAAU+B,EACVhC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOf,EAAMM,YACba,SAAU+B,IAGZ,cAAC,EAAD,CACEpC,KAAK,SACLE,MAAM,YACND,MAAOf,EAAMG,OACbgB,SAAU+B,EACV9B,aAAcyB,EACd3B,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,UACLE,MAAM,WACND,MAAOf,EAAMQ,QACbW,SAAU+B,EACV9B,aAAcuB,EACdzB,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,SACLE,MAAM,UACND,MAAOf,EAAMY,OACbO,SAAU+B,EACVhC,UAAQ,IAGV,qBAAKjB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE+B,KAAK,SACL,UAAQ,gBACR/B,UAAU,iBACVwD,UAAWV,EAJb,uBAhDCN,EA4DV,E,QCzHYiB,EAAM,WACjB,MAA4BrC,mBAAkBsC,GAA9C,mBAAOjD,EAAP,KAAekD,EAAf,KAMA,OACE,sBAAK3D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAUsC,MAXC,SAACsB,GAChBD,GAAU,SAAAE,GAAa,4BAAQA,GAAR,CAAuBD,GAAvB,GACxB,QAaF,ECtBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.b51d9b80.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (key: string, value: string) => void,\n  linkValidity?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  linkValidity,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const hasLinkValidityError\n  = (linkValidity === false) && touched && value && required;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasLinkValidityError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(name, event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasLinkValidityError && (\n        <p className=\"help is-danger\">{`${label} is not a valid link`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialMovieState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movie, setMovie] = useState(initialMovieState);\n  const [count, setCount] = useState(0);\n  const [linkImdbValidity, setLinkImdbValidity] = useState(false);\n  const [linkImgValidity, setLinkImgValidity] = useState(false);\n  const requiredCompleted\n  = movie.title && movie.imgUrl && movie.imdbUrl && movie.imdbId\n   && linkImdbValidity && linkImgValidity;\n\n  const pattern = new RegExp(\n    '^((([A-Za-z]{3,9}:(?://)?)|(?:www\\\\.|[-;:&=+$,\\\\w]+@))[A-Za-z0-9.-]+'\n    + '((?:\\\\/[+~%\\\\/.\\\\w-_]*)?\\\\??(?:[-+=&;%@,.\\\\w_]*)#?('\n    + '?:[,.!/\\\\\\\\\\\\w]*))?)$',\n  );\n\n  const reset = () => {\n    setMovie(initialMovieState);\n    setLinkImdbValidity(false);\n    setLinkImgValidity(false);\n  };\n\n  const handleAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!requiredCompleted) {\n      return;\n    }\n\n    onAdd(movie);\n    reset();\n    setCount(count + 1);\n  };\n\n  const handleInputChange = (key: string, value: string) => {\n    setMovie((prevFields) => {\n      return {\n        ...prevFields,\n        [key]: value.trimStart(),\n      };\n    });\n\n    if ((key === 'imgUrl')) {\n      setLinkImgValidity(pattern.test(value));\n    }\n\n    if ((key === 'imdbUrl')) {\n      setLinkImdbValidity(pattern.test(value));\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleAdd}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={handleInputChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleInputChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={handleInputChange}\n        linkValidity={linkImgValidity}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={handleInputChange}\n        linkValidity={linkImdbValidity}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={handleInputChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!requiredCompleted}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { Movie } from './types/Movie';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}